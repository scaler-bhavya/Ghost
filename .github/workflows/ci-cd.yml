name: Ghost CMS CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '**.js'
      - '**.json'
      - '**.yml'
      - 'Dockerfile'
      - 'ghost/core/**'
      - 'package.json'
      - 'yarn.lock'
  pull_request:
    branches:
      - main
    paths:
      - '**.js'
      - '**.json'
      - '**.yml'
      - 'Dockerfile'
      - 'ghost/core/**'
      - 'package.json'
      - 'yarn.lock'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: ghost_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -u root -ptestpass" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h localhost -u root -ptestpass --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Initialize database
        env:
          NODE_ENV: testing
          database__client: mysql
          database__connection__host: localhost
          database__connection__user: root
          database__connection__password: testpass
          database__connection__database: ghost_test
          database__connection__port: 3306
        run: cd ghost/core && yarn knex-migrator init || true

      - name: Run database migrations
        env:
          NODE_ENV: testing
          database__client: mysql
          database__connection__host: localhost
          database__connection__user: root
          database__connection__password: testpass
          database__connection__database: ghost_test
          database__connection__port: 3306
        run: cd ghost/core && yarn knex-migrator migrate

      - name: Run tests
        env:
          NODE_ENV: testing
          database__client: mysql
          database__connection__host: localhost
          database__connection__user: root
          database__connection__password: testpass
          database__connection__database: ghost_test
          database__connection__port: 3306
        run: cd ghost/core && yarn test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ghost-cms:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Stop and remove existing containers if they exist
            docker stop ghost-container mysql-container || true
            docker rm ghost-container mysql-container || true

            # Run MySQL container
            docker run -d \
              --name mysql-container \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              -e MYSQL_DATABASE=ghost_prod \
              -e MYSQL_USER=ghost_user \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -v mysql_data:/var/lib/mysql \
              --restart always \
              mysql:8

            # Wait for MySQL to be ready
            for i in {1..30}; do
              if docker exec mysql-container mysqladmin ping -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} --silent; then
                echo "MySQL is ready"
                break
              fi
              echo "Waiting for MySQL..."
              sleep 2
            done

            # Run Ghost container
            docker run -d \
              --name ghost-container \
              -p 2368:2368 \
              -e database__client=mysql \
              -e database__connection__host=mysql-container \
              -e database__connection__user=ghost_user \
              -e database__connection__password=${{ secrets.MYSQL_PASSWORD }} \
              -e database__connection__database=ghost_prod \
              -e database__connection__port=3306 \
              -e url=http://${{ secrets.VPS_HOST }}:2368 \
              --link mysql-container:mysql \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/ghost-cms:latest

            # Clean up unused images
            docker image prune -f

  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "Pipeline succeeded!"
          else
            echo "Pipeline failed. Please check the CI/CD logs."
          fi