name: Ghost CMS CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - '**/*.js'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
      - 'Dockerfile'
      - 'ghost/core/**'
      - 'package.json'
      - 'yarn.lock'
  pull_request:
    branches: [main]
    paths:
      - '**/*.js'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
      - 'Dockerfile'
      - 'ghost/core/**'
      - 'package.json'
      - 'yarn.lock'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'  # Matches ghost-admin@6.0.8 requirement
          cache: 'yarn'

      - name: Install Yarn (latest stable)
        run: npm install -g yarn@3.6.0  # Use a modern Yarn version to avoid dependency issues

      - name: Install dependencies
        run: yarn install --immutable  # Replaces --frozen-lockfile for Yarn 3 compatibility

      - name: Set up test environment (nocks)
        run: |
          mkdir -p ghost/core/test/utils
          cat > ghost/core/test/utils/test-setup.js << 'EOF'
          const nock = require('nock');
          nock('http://127.0.0.1:2369').persist().get(/.*/).reply(200, 'Mocked response');
          nock('http://localhost:2368').persist().get(/.*/).reply(200, 'Mocked response');
          nock('http://www.notarealsite.com').persist().get(/.*/).reply(200, 'Mocked response');
          nock('https://api.stripe.com').persist().get(/.*/).reply(200, { id: 'price_1', active: true, unit_amount: 500, currency: 'usd' });
          nock('https://api.mailgun.net').persist().get(/.*/).reply(200, { items: [] });
          nock('https://example.com').persist().get(/.*/).reply(200, { title: 'Mocked OEmbed', type: 'photo', url: 'https://example.com/image.jpg' });
          EOF

      # Run unit tests excluding specific tests, using sqlite3 and url=http://127.0.0.1:2369
      - name: Run unit tests (sqlite3) â€” bulk suite
        working-directory: ghost/core
        env:
          NODE_ENV: testing
          database__client: sqlite3
          url: http://127.0.0.1:2369
        run: |
          yarn test:unit --require ./test/utils/test-setup.js \
            --exclude test/unit/shared/config/loader.test.js \
            --exclude test/unit/server/activitypub \
            --exclude test/unit/frontend/helpers/ghost_head.test.js \
            --exclude test/unit/server/services/email-service \
            --exclude test/unit/server/services/members \
            --exclude test/unit/server/services/oembed \
            --exclude test/unit/server/services/posts/PostsExporter.test.js \
            --exclude test/unit/server/services/recommendations

      # Run config loader spec with url=http://localhost:2368
      - name: Run config loader spec (sqlite3) â€” targeted suite
        working-directory: ghost/core
        env:
          NODE_ENV: testing
          database__client: sqlite3
          url: http://localhost:2368
        run: |
          yarn mocha --reporter dot --require tsx --exit --trace-warnings \
            --recursive --extension=test.js,test.ts \
            --require ./test/utils/test-setup.js \
            ./test/unit/shared/config/loader.test.js

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ghost-cms:latest
            ${{ secrets.DOCKER_USERNAME }}/ghost-cms:${{ github.sha }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            # Stop and remove existing containers (ignore errors)
            docker stop ghost-container mysql-container || true
            docker rm ghost-container mysql-container || true

            # Create Docker network if it doesn't exist
            docker network create ghost-net || true

            # Start MySQL container
            docker run -d \
              --name mysql-container \
              --network ghost-net \
              -e MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
              -e MYSQL_DATABASE=ghost_prod \
              -e MYSQL_USER=ghost_user \
              -e MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}' \
              -v mysql_data:/var/lib/mysql \
              --restart always \
              mysql:8

            # Wait for MySQL to be ready (timeout after 60 seconds)
            for i in {1..30}; do
              if docker exec mysql-container mysqladmin ping -h 127.0.0.1 -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
                echo "MySQL is ready"
                break
              fi
              echo "Waiting for MySQL..."
              sleep 2
            done

            # Start Ghost container
            docker run -d \
              --name ghost-container \
              --network ghost-net \
              -p 2368:2368 \
              -e database__client=mysql \
              -e database__connection__host=mysql-container \
              -e database__connection__user=ghost_user \
              -e database__connection__password='${{ secrets.MYSQL_PASSWORD }}' \
              -e database__connection__database=ghost_prod \
              -e database__connection__port=3306 \
              -e url=http://${{ secrets.VPS_HOST }}:2368 \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/ghost-cms:latest

            # Clean up unused Docker images
            docker image prune -f || true

  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "Pipeline succeeded! Ghost CMS deployed successfully."
          else
            echo "Pipeline failed. Check the CI/CD logs for details."
            exit 1
          fi